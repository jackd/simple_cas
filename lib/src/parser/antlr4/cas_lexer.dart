// Generated from Cas.g4 by antlr4dart

part of cas.parser.antlr;


class CasLexer extends Lexer {

  static const int ID = 1, INT = 2, FLOAT = 3, NEWLINE = 4, WS = 5, MUL = 6, 
                   DIV = 7, ADD = 8, SUB = 9, POW = 10, PL = 11, PR = 12, 
                   ASSIGN = 13, COMMA = 14;

  static const String _serializedAtn =  "\x03\u0430\ud6d1\u8206\uad2d\u4417"
  	"\uaef1\u8d80\uaadd\x02\x10\x5d\x08\x01\x04\x02\x09\x02\x04\x03\x09\x03"
  	"\x04\x04\x09\x04\x04\x05\x09\x05\x04\x06\x09\x06\x04\x07\x09\x07\x04"
  	"\x08\x09\x08\x04\x09\x09\x09\x04\x0a\x09\x0a\x04\x0b\x09\x0b\x04\x0c"
  	"\x09\x0c\x04\x0d\x09\x0d\x04\x0e\x09\x0e\x04\x0f\x09\x0f\x03\x02\x03"
  	"\x02\x03\x03\x06\x03\x23\x0a\x03\x0d\x03\x0e\x03\x24\x03\x04\x07\x04"
  	"\x28\x0a\x04\x0c\x04\x0e\x04\x2b\x0b\x04\x03\x04\x05\x04\x2e\x0a\x04"
  	"\x03\x04\x06\x04\x31\x0a\x04\x0d\x04\x0e\x04\x32\x03\x04\x03\x04\x05"
  	"\x04\x37\x0a\x04\x03\x04\x06\x04\x3a\x0a\x04\x0d\x04\x0e\x04\x3b\x05"
  	"\x04\x3e\x0a\x04\x03\x05\x05\x05\x41\x0a\x05\x03\x05\x03\x05\x03\x06"
  	"\x06\x06\x46\x0a\x06\x0d\x06\x0e\x06\x47\x03\x06\x03\x06\x03\x07\x03"
  	"\x07\x03\x08\x03\x08\x03\x09\x03\x09\x03\x0a\x03\x0a\x03\x0b\x03\x0b"
  	"\x03\x0c\x03\x0c\x03\x0d\x03\x0d\x03\x0e\x03\x0e\x03\x0f\x03\x0f\x02"
  	"\x02\x10\x03\x03\x05\x04\x07\x05\x09\x06\x0b\x07\x0d\x08\x0f\x09\x11"
  	"\x0a\x13\x0b\x15\x0c\x17\x0d\x19\x0e\x1b\x0f\x1d\x10\x03\x02\x07\x04"
  	"\x02\x43\x5c\x63\x7c\x03\x02\x32\x3b\x04\x02\x47\x47\x67\x67\x04\x02"
  	"\x2d\x2d\x2f\x2f\x04\x02\x0b\x0b\x22\x22\x65\x02\x03\x03\x02\x02\x02"
  	"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\x09\x03\x02\x02"
  	"\x02\x02\x0b\x03\x02\x02\x02\x02\x0d\x03\x02\x02\x02\x02\x0f\x03\x02"
  	"\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03"
  	"\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1b"
  	"\x03\x02\x02\x02\x02\x1d\x03\x02\x02\x02\x03\x1f\x03\x02\x02\x02\x05"
  	"\x22\x03\x02\x02\x02\x07\x29\x03\x02\x02\x02\x09\x40\x03\x02\x02\x02"
  	"\x0b\x45\x03\x02\x02\x02\x0d\x4b\x03\x02\x02\x02\x0f\x4d\x03\x02\x02"
  	"\x02\x11\x4f\x03\x02\x02\x02\x13\x51\x03\x02\x02\x02\x15\x53\x03\x02"
  	"\x02\x02\x17\x55\x03\x02\x02\x02\x19\x57\x03\x02\x02\x02\x1b\x59\x03"
  	"\x02\x02\x02\x1d\x5b\x03\x02\x02\x02\x1f\x20\x09\x02\x02\x02\x20\x04"
  	"\x03\x02\x02\x02\x21\x23\x09\x03\x02\x02\x22\x21\x03\x02\x02\x02\x23"
  	"\x24\x03\x02\x02\x02\x24\x22\x03\x02\x02\x02\x24\x25\x03\x02\x02\x02"
  	"\x25\x06\x03\x02\x02\x02\x26\x28\x09\x03\x02\x02\x27\x26\x03\x02\x02"
  	"\x02\x28\x2b\x03\x02\x02\x02\x29\x27\x03\x02\x02\x02\x29\x2a\x03\x02"
  	"\x02\x02\x2a\x2d\x03\x02\x02\x02\x2b\x29\x03\x02\x02\x02\x2c\x2e\x07"
  	"\x30\x02\x02\x2d\x2c\x03\x02\x02\x02\x2d\x2e\x03\x02\x02\x02\x2e\x30"
  	"\x03\x02\x02\x02\x2f\x31\x09\x03\x02\x02\x30\x2f\x03\x02\x02\x02\x31"
  	"\x32\x03\x02\x02\x02\x32\x30\x03\x02\x02\x02\x32\x33\x03\x02\x02\x02"
  	"\x33\x3d\x03\x02\x02\x02\x34\x36\x09\x04\x02\x02\x35\x37\x09\x05\x02"
  	"\x02\x36\x35\x03\x02\x02\x02\x36\x37\x03\x02\x02\x02\x37\x39\x03\x02"
  	"\x02\x02\x38\x3a\x09\x03\x02\x02\x39\x38\x03\x02\x02\x02\x3a\x3b\x03"
  	"\x02\x02\x02\x3b\x39\x03\x02\x02\x02\x3b\x3c\x03\x02\x02\x02\x3c\x3e"
  	"\x03\x02\x02\x02\x3d\x34\x03\x02\x02\x02\x3d\x3e\x03\x02\x02\x02\x3e"
  	"\x08\x03\x02\x02\x02\x3f\x41\x07\x0f\x02\x02\x40\x3f\x03\x02\x02\x02"
  	"\x40\x41\x03\x02\x02\x02\x41\x42\x03\x02\x02\x02\x42\x43\x07\x0c\x02"
  	"\x02\x43\x0a\x03\x02\x02\x02\x44\x46\x09\x06\x02\x02\x45\x44\x03\x02"
  	"\x02\x02\x46\x47\x03\x02\x02\x02\x47\x45\x03\x02\x02\x02\x47\x48\x03"
  	"\x02\x02\x02\x48\x49\x03\x02\x02\x02\x49\x4a\x08\x06\x02\x02\x4a\x0c"
  	"\x03\x02\x02\x02\x4b\x4c\x07\x2c\x02\x02\x4c\x0e\x03\x02\x02\x02\x4d"
  	"\x4e\x07\x31\x02\x02\x4e\x10\x03\x02\x02\x02\x4f\x50\x07\x2d\x02\x02"
  	"\x50\x12\x03\x02\x02\x02\x51\x52\x07\x2f\x02\x02\x52\x14\x03\x02\x02"
  	"\x02\x53\x54\x07\x60\x02\x02\x54\x16\x03\x02\x02\x02\x55\x56\x07\x2a"
  	"\x02\x02\x56\x18\x03\x02\x02\x02\x57\x58\x07\x2b\x02\x02\x58\x1a\x03"
  	"\x02\x02\x02\x59\x5a\x07\x3f\x02\x02\x5a\x1c\x03\x02\x02\x02\x5b\x5c"
  	"\x07\x2e\x02\x02\x5c\x1e\x03\x02\x02\x02\x0c\x02\x24\x29\x2d\x32\x36"
  	"\x3b\x3d\x40\x47\x03\x08\x02\x02";

  final Atn atn = AtnSimulator.deserialize(_serializedAtn);

  final sharedContextCache = new PredictionContextCache();

  final List<String> modeNames = [
    "DEFAULT_MODE"
  ];

  final List<String> tokenNames = [
    "'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
    "'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
    "'\r'", "'\\u000E'"
  ];

  final List<String> ruleNames = [
    "ID", "INT", "FLOAT", "NEWLINE", "WS", "MUL", "DIV", "ADD", "SUB", "POW", 
    "PL", "PR", "ASSIGN", "COMMA"
  ]; 
  	
  CasLexer(StringSource input) : super(input) {
    var _decisionToDfa = new List<Dfa>(atn.numberOfDecisions);
    for (int i = 0; i < atn.numberOfDecisions; i++) {
      _decisionToDfa[i] = new Dfa(atn.getDecisionState(i), i);
    }
    interpreter = new LexerAtnSimulator(atn, _decisionToDfa, sharedContextCache, this);
  }

  String get serializedAtn => _serializedAtn;

  String get grammarFileName => "Cas.g4";
}